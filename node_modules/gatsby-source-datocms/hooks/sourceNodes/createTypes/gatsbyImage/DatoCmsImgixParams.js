"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var imgixParams = require('imgix-url-params/dist/parameters');

var _require = require('humps'),
    camelize = _require.camelize;

var objectEntries = require('object.entries');

module.exports = function (_ref) {
  var actions = _ref.actions,
      schema = _ref.schema,
      store = _ref.store;
  var imgixParamsFields = {};
  var mappings = {
    "boolean": 'Boolean',
    hex_color: 'String',
    integer: 'Int',
    list: 'String',
    number: 'Float',
    path: 'String',
    string: 'String',
    timestamp: 'String',
    unit_scalar: 'Float',
    font: 'String',
    ratio: 'Float',
    url: 'String'
  };
  objectEntries(imgixParams.parameters).forEach(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        param = _ref3[0],
        doc = _ref3[1];

    var type = 'String';

    if (doc.expects.length === 1) {
      if (mappings[doc.expects[0].type]) {
        type = mappings[doc.expects[0].type];
      }
    }

    imgixParamsFields[camelize(param)] = {
      type: type,
      description: "".concat(doc.short_description, " (").concat(doc.url, ")")
    };
  });
  actions.createTypes([schema.buildInputObjectType({
    name: "DatoCmsImgixParams",
    fields: imgixParamsFields
  })]);
};