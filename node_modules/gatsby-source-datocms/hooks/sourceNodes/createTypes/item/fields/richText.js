"use strict";

var _require = require('humps'),
    camelize = _require.camelize,
    pascalize = _require.pascalize;

module.exports = function (_ref) {
  var parentItemType = _ref.parentItemType,
      field = _ref.field,
      schema = _ref.schema,
      gqlItemTypeName = _ref.gqlItemTypeName,
      entitiesRepo = _ref.entitiesRepo;
  var fieldKey = camelize(field.apiKey);
  var parentItemTypeName = gqlItemTypeName(parentItemType);
  var itemTypeIds = field.validators[field.fieldType === 'rich_text' ? 'richTextBlocks' : 'itemsItemType'].itemTypes;

  if (itemTypeIds.length === 0) {
    return {
      fieldType: 'String'
    };
  }

  if (itemTypeIds.length === 1) {
    var linkedItemType = entitiesRepo.findEntity('item_type', itemTypeIds[0]);
    return {
      fieldType: {
        type: "[".concat(gqlItemTypeName(linkedItemType), "]"),
        resolve: function resolve(parent, args, context) {
          var ids = 'locale' in parent && 'value___NODE' in parent ? parent.value___NODE : parent["".concat(fieldKey, "___NODE")];
          return context.nodeModel.getNodesByIds({
            ids: ids
          });
        }
      }
    };
  }

  var unionType = "DatoCmsUnionFor".concat(parentItemTypeName).concat(pascalize(field.apiKey));
  return {
    types: [schema.buildUnionType({
      name: unionType,
      types: itemTypeIds.map(function (id) {
        return gqlItemTypeName(entitiesRepo.findEntity('item_type', id));
      })
    })],
    fieldType: {
      type: "[".concat(unionType, "]"),
      resolve: function resolve(parent, args, context) {
        var ids = 'locale' in parent && 'value___NODE' in parent ? parent.value___NODE : parent["".concat(fieldKey, "___NODE")];
        return context.nodeModel.getNodesByIds({
          ids: ids
        });
      }
    }
  };
};