"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var _require = require('humps'),
    camelize = _require.camelize,
    pascalize = _require.pascalize;

var _require2 = require('datocms-client'),
    Site = _require2.Site,
    Item = _require2.Item;

var entries = require('object.entries');

var buildNode = require('../utils/buildNode');

var buildSeoMetaTagsNode = require('./buildSeoMetaTagsNode');

var itemNodeId = require('./itemNodeId');

var addField = require('./addField');

module.exports = function buildItemNode(entity, _ref) {
  var _ref2;

  var entitiesRepo = _ref.entitiesRepo,
      getNode = _ref.getNode,
      actions = _ref.actions,
      localeFallbacks = _ref.localeFallbacks;
  var siteEntity = entitiesRepo.site;
  var type = pascalize(entity.itemType.apiKey);
  return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(siteEntity.locales.map(function (locale) {
    var additionalNodesToCreate = [];
    var i18n = {
      locale: locale,
      fallbacks: localeFallbacks
    };
    var itemNode = buildNode("DatoCms".concat(type), "".concat(entity.id, "-").concat(locale), function (node) {
      node.locale = locale;
      node.model___NODE = "DatoCmsModel-".concat(entity.itemType.id);
      entity.itemType.fields.forEach(function (field) {
        addField(node, camelize(field.apiKey), entity, field, node, entitiesRepo, i18n, additionalNodesToCreate);

        if (field.localized) {
          node["_all".concat(pascalize(field.apiKey), "Locales")] = entries(entity[camelize(field.apiKey)] || {}).map(function (_ref3) {
            var _ref4 = _slicedToArray(_ref3, 2),
                locale = _ref4[0],
                v = _ref4[1];

            var result = {
              locale: locale
            };
            var innerI18n = {
              locale: locale,
              fallbacks: localeFallbacks
            };
            addField(result, 'value', entity, field, node, entitiesRepo, innerI18n, additionalNodesToCreate);
            return result;
          });
        }
      });
      var seoNode = buildSeoMetaTagsNode(node, entity, entitiesRepo, i18n);
      additionalNodesToCreate.push(seoNode);
      node.seoMetaTags___NODE = seoNode.id;
      node.meta = entity.meta;
      node.originalId = entity.id;

      if (entity.itemType.sortable) {
        node.position = entity.position;
      }

      if (entity.itemType.tree) {
        node.position = entity.position;
        node.root = !entity.parentId;
        node.treeChildren___NODE = [];

        if (entity.parentId) {
          var parentId = itemNodeId(entity.parentId, locale, entitiesRepo);
          node.treeParent___NODE = parentId;
        }
      }
    });
    return [itemNode].concat(additionalNodesToCreate);
  })));
};