"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var fs = require('fs-extra');

var _require = require('datocms-client'),
    SiteClient = _require.SiteClient,
    Loader = _require.Loader;

var createNodeFromEntity = require('./createNodeFromEntity');

var destroyEntityNode = require('./destroyEntityNode');

var finalizeNodesCreation = require('./finalizeNodesCreation');

var Queue = require('promise-queue');

var createTypes = require('./createTypes');

var CLIENT_HEADERS = {
  'X-Reason': 'dump',
  'X-SSG': 'gatsby'
};

module.exports =
/*#__PURE__*/
function () {
  var _ref3 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(_ref, _ref2) {
    var actions, getNode, getNodesByType, reporter, parentSpan, schema, store, apiToken, disableLiveReload, previewMode, apiUrl, rawLocaleFallbacks, client, localeFallbacks, loader, program, cacheDir, context, activity, queue;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            actions = _ref.actions, getNode = _ref.getNode, getNodesByType = _ref.getNodesByType, reporter = _ref.reporter, parentSpan = _ref.parentSpan, schema = _ref.schema, store = _ref.store;
            apiToken = _ref2.apiToken, disableLiveReload = _ref2.disableLiveReload, previewMode = _ref2.previewMode, apiUrl = _ref2.apiUrl, rawLocaleFallbacks = _ref2.localeFallbacks;
            client = apiUrl ? new SiteClient(apiToken, CLIENT_HEADERS, apiUrl) : new SiteClient(apiToken, CLIENT_HEADERS);
            localeFallbacks = rawLocaleFallbacks || {};
            loader = new Loader(client, process.env.GATSBY_CLOUD || previewMode);
            program = store.getState().program;
            cacheDir = "".concat(program.directory, "/.cache/datocms-assets");

            if (!fs.existsSync(cacheDir)) {
              fs.mkdirSync(cacheDir);
            }

            context = {
              entitiesRepo: loader.entitiesRepo,
              actions: actions,
              getNode: getNode,
              getNodesByType: getNodesByType,
              localeFallbacks: localeFallbacks,
              schema: schema,
              store: store,
              cacheDir: cacheDir
            };
            loader.entitiesRepo.addUpsertListener(function (entity) {
              createNodeFromEntity(entity, context);
            });
            loader.entitiesRepo.addDestroyListener(function (entity) {
              destroyEntityNode(entity, context);
            });
            activity = reporter.activityTimer("loading DatoCMS content", {
              parentSpan: parentSpan
            });
            activity.start();
            _context2.next = 15;
            return loader.load();

          case 15:
            finalizeNodesCreation(context);
            activity.end();

            if (actions.createTypes) {
              createTypes(context);
            }

            queue = new Queue(1, Infinity);

            if (process.env.NODE_ENV !== "production" && !disableLiveReload) {
              loader.watch(function (loadPromise) {
                queue.add(
                /*#__PURE__*/
                _asyncToGenerator(
                /*#__PURE__*/
                regeneratorRuntime.mark(function _callee() {
                  var activity;
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          activity = reporter.activityTimer("detected change in DatoCMS content, loading new data", {
                            parentSpan: parentSpan
                          });
                          activity.start();
                          _context.next = 4;
                          return loadPromise;

                        case 4:
                          finalizeNodesCreation(context);
                          activity.end();

                        case 6:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                })));
              });
            }

          case 20:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function (_x, _x2) {
    return _ref3.apply(this, arguments);
  };
}();