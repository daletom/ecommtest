"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = fetchAllPages;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function times(n) {
  /* eslint-disable prefer-spread */
  return Array.apply(null, {
    length: n
  }).map(Number.call, Number);
  /* eslint-enable prefer-spread */
}

function fetchAllPages(client, endpoint, params) {
  var itemsPerPage = 100;
  return client.get(endpoint, _objectSpread({}, params, {
    'page[limit]': itemsPerPage
  })).then(function (baseResponse) {
    var pages = Math.ceil(baseResponse.meta.total_count / itemsPerPage);
    return times(pages - 1).reduce(function (chain, extraPage) {
      return chain.then(function (result) {
        return client.get(endpoint, _objectSpread({}, params, {
          'page[offset]': itemsPerPage * (extraPage + 1),
          'page[limit]': itemsPerPage
        })).then(function (response) {
          return result.concat(response.data);
        });
      });
    }, Promise.resolve(baseResponse.data)).then(function (data) {
      return _objectSpread({}, baseResponse, {
        data: data
      });
    });
  });
}